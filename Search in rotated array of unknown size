// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : No, Requires premium subscription
// Any problem you faced while coding this : 


// Your code here along with comments explaining your approach
Approach: 1. Use arrayReader API to fetch element and increase high by 2  for O(logN) complexity

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        
        if(nums==null || nums.length==0){
            return -1;
        }
        
        while(low <= high){
            int mid = low + (high - low)/2;
            
            if(nums[low]<nums[mid]){
              return nums[low]
            }
            
            if((mid==low || nums[mid] < nums[mid-1]) && (mid==high || nums[mid] < nums[mid+1])){
                return nums[mid];
            }

            }else if(nums[low] <= nums[mid] ){   
                  low = mid + 1;
                  }
            }else{
                high = mid - 1;
            }
        } 
        return -1;
    }
}
